Approach : BSU

public class DisjointSet {
    public ArrayList<Integer> parent = new ArrayList<>();
    ArrayList<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for(int i=0;i<n;i++) {
            parent.add(i);
            size.add(i);
        }
    }

    public int findUPar(int node) {
        if(node == parent.get(node)) {
            return node;
        }

        int ulP = findUPar(parent.get(node));
        parent.set(node, ulP);
        return parent.get(node);
    }

    public void unionBySize(int u, int v) {
        int ulP_u = findUPar(u);
        int ulP_v = findUPar(v);

        if(ulP_u == ulP_v) return;

        if(size.get(ulP_u) > size.get(ulP_v)) {
            parent.set(ulP_v, ulP_u);
            size.set(ulP_u, size.get(ulP_u)+size.get(ulP_v));
        }else{
            parent.set(ulP_u, ulP_v);
            size.set(ulP_v, size.get(ulP_u) + size.get(ulP_v));
        }
    }
}

class Solution {
    public int makeConnected(int n, int[][] connections) {
        DisjointSet ds = new DisjointSet(n);
        int cntExtras = 0;

        for(int i=0;i<connections.length;i++) {
            int u = connections[i][0];
            int v = connections[i][1];

            if(ds.findUPar(u) == ds.findUPar(v)) {
                cntExtras++;
            }else{
                ds.unionBySize(u,v);
            }
        }
        
        int component = 0;

        for(int i=0;i<n;i++) {
            if(ds.parent.get(i) == i) {
                component++;
            }
        }

        if(cntExtras >= component-1) return component-1;
        return -1;
    }
}
