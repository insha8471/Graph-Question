Approach : Dijkstra Algorithm
Time complexity : O(ElogV)


class Solution {
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair<Long, Long>>> adj = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < roads.length; i++) {
            adj.get(roads[i][0]).add(new Pair<>((long) roads[i][1], (long) roads[i][2]));
            adj.get(roads[i][1]).add(new Pair<>((long) roads[i][0], (long) roads[i][2]));
        }

        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> Long.compare(a.getKey(), b.getKey()));

        long[] dist = new long[n];
        Arrays.fill(dist, Long.MAX_VALUE);

        long[] ways = new long[n];
        ways[0] = 1;
        dist[0] = 0;

        pq.add(new Pair<>(0L, 0L));
        long mod = (long) (1e9 + 7);

        while (!pq.isEmpty()) {
            long dis = pq.peek().getKey();
            long node = pq.peek().getValue();
            pq.remove();

            for (Pair<Long, Long> it : adj.get((int) node)) {
                long adjNode = it.getKey();
                long adjD = it.getValue();

                if ((dis + adjD) < dist[(int) adjNode]) {
                    dist[(int) adjNode] = dis + adjD;
                    pq.add(new Pair<>(dis + adjD, adjNode));
                    ways[(int) adjNode] = ways[(int) node];
                } else if (dis + adjD == dist[(int) adjNode]) {
                    ways[(int) adjNode] = (ways[(int) node] + ways[(int) adjNode]) % mod;
                }
            }
        }
        return (int) (ways[n - 1] % mod);
    }
}
