Approach : Dijkstra using priority Queue
Time complexity : O(Elogv)
Space complexity : O(E + V)

class Pair{
    int distance;
    int node;
    Pair(int distance, int node) {
        this.distance = distance;
        this.node = node;
    }
}
class Solution
{
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x,y) -> x.distance-y.distance);
        
        int[] dist = new int[V];
        Arrays.fill(dist, (int)1e9);
        dist[S] = 0;
        
        pq.add(new Pair(0,S));
        
        while(!pq.isEmpty()) {
            int dis = pq.peek().distance;
            int node = pq.peek().node;
            pq.remove();
            
            for(ArrayList<Integer> it : adj.get(node)) {
                int edgeWeight = it.get(1);
                int adjNode = it.get(0);
                
                if(edgeWeight + dis < dist[adjNode]) {
                    dist[adjNode] = edgeWeight + dis;
                    pq.add(new Pair(dist[adjNode], adjNode));
                }
            }
        }
        return dist;
    }
}

