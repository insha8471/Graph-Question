Approach : DFS
Time complexity : O(V + E)

class Solution {
    public boolean dfs(int start, ArrayList<ArrayList<Integer>> adj, int[] vis, int[] pathVis) {
        vis[start] = 1;
        pathVis[start] = 1;
        
        for(int it : adj.get(start)) {
            if(vis[it] == 0){
                if(dfs(it,adj,vis,pathVis)== true){
                    return true;
                }
            }else{
                if(pathVis[it] == 1) {
                    return true;
                }
            }
        }
        pathVis[start] = 0;
        return false;
    }
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] vis = new int[V];
        int[] pathVis = new int[V];
        
        for(int i=0;i<V;i++) {
            if(vis[i] == 0) {
                if(dfs(i,adj,vis,pathVis)) {
                    return true;
                }
            }
        }
        return false;
    }
}
