Approach Topo Sort + Relax the edges
Time complexity : O(N + M)
Space complexity : O(E)



class Pair{
    int first;
    int second;
    
    Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}
class Solution {
    public void topoSort(int start, ArrayList<ArrayList<Pair>> adj, int[] vis, Stack<Integer> st) {
        vis[start] = 1;
        
        for(Pair it : adj.get(start)) {
            int v = it.first;
            if(vis[v] == 0) {
                topoSort(v,adj, vis, st);
            }
        }
        st.push(start);
    }

	public int[] shortestPath(int N,int M, int[][] edges) {
	    ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
	    
	    for(int i=0;i<N;i++) {
	        ArrayList<Pair> temp = new ArrayList<>();
	        adj.add(temp);
	    }
	    
	    for(int[] e : edges) {
	        adj.get(e[0]).add(new Pair(e[1],e[2]));
	    }
	    
	    int[] vis = new int[N];
	    Stack<Integer> st = new Stack<>();
	    
	    for(int i=0;i<N;i++) {
	        if(vis[i] == 0){
	            topoSort(i, adj, vis, st);
	        }
	    }
	    
	    int[] dist = new int[N];
	    Arrays.fill(dist, (int)1e9);
	    
	    dist[0] = 0;
 	    
 	    int idx = 0;
 	    
 	    while(!st.isEmpty()) {
 	        int node = st.peek();
 	        st.pop();
 	        
 	        for(Pair it : adj.get(node)) {
 	            int v = it.first;
 	            int wt = it.second;
 	            
 	            if(dist[node]+wt < dist[v]) {
 	                dist[v] = dist[node]+wt;
 	            }
 	        }
 	    }
 	    
 	    for(int i=0;i<N;i++) {
            if(dist[i] == 1e9) {
                dist[i] = -1;
            } 
 	    }
 	    return dist;
	}
}
