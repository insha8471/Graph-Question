Approach : BFS
Time complexity : O(n*m)
Space complexity  : O(n*m)


class Pair{
    int row;
    int col;
    Pair(int row, int col) {
        this.row = row;
        this.col = col;
    }
}

class Solution {
    public void isBFS(int r, int c, int[][] mat, int[][] vis) {
        Queue<Pair> q = new LinkedList<>();
        vis[r][c] = 1;
        q.add(new Pair(r,c));

        int[][] directions = {{0,1},{0,-1},{-1,0},{1,0}};
        int n = mat.length;
        int m = mat[0].length;

        while(!q.isEmpty()) {
            int row = q.peek().row;
            int col = q.peek().col;
            q.remove();

            for(int[] dir : directions) {
                int _r = row + dir[0];
                int _c = col + dir[1];

                if(_r >= 0 && _r < n && _c >= 0 && _c < m && vis[_r][_c] == 0) {
                    vis[_r][_c] = 1;
                    q.add(new Pair(_r, _c));
                } 
            }
        }

    } 
    public int regionsBySlashes(String[] grid) {
        int row = grid.length;
        int col = grid[0].length();

        int[][] mat = new int[row*3][col*3];

        for(int i=0;i<row;i++) {
            for(int j=0;j<col;j++) {
                if(grid[i].charAt(j) == '/'){
                    mat[i*3][j*3+2] = 1;
                    mat[i*3+1][j*3+1] = 1;
                    mat[i*3+2][j*3] = 1;
                }else if(grid[i].charAt(j) == '\\') {
                    mat[i*3][j*3]  =1;
                    mat[i*3+1][j*3+1] = 1;
                    mat[i*3+2][j*3+2] = 1;
                }
            }
        }

        int region = 0;
        int[][] vis = new int[row*3][col*3];
        for(int i=0;i<row*3;i++) {
            for(int j=0;j<col*3;j++) {
                if(mat[i][j] == 1){
                    vis[i][j] = 1;
                } 
            }
        }

        for(int i=0;i<row*3;i++) {
            for(int j=0;j<col*3;j++) {
                if(vis[i][j] == 0) {
                    isBFS(i,j,mat,vis);
                    region++;
                    
                }
            }
        }
        return region;
    }
}
