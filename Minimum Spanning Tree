Approach : Primes Algorithm
Time complexity : O(ElogE)
Space complexity : O(V + E)

class Pair {
    int weight;
    int node;
    Pair(int weight, int node) {
        this.weight = weight;
        this.node = node;
    }
}

class Solution {
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        PriorityQueue<Pair> pq = new 
        PriorityQueue<>((a,b) -> a.weight-b.weight);
        
        int[] vis= new int[V];
        pq.add(new Pair(0,0));
        int sum = 0;
        
        while(!pq.isEmpty()) {
            int node = pq.peek().node;
            int wt = pq.peek().weight;
            pq.remove();
            if(vis[node] == 1) continue;
            vis[node] = 1;
            sum += wt;
            for(int[] neighbour : adj.get(node)) {
                int adjNode = neighbour[0];
                int adjWt = neighbour[1];
                
                if(vis[adjNode] == 0) {
                    pq.add(new Pair(adjWt, adjNode));
                }
            }
        }
        return sum;
    }
}
