Approach : Dijkstra Algo
Time complexitiy : O(100000 * n)
Space complexity : O(100000 * n)

class Pair{
    int first;
    int second;
    Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}
class Solution {
    int minimumMultiplications(int[] arr, int start, int end) {
        if(start == end) return 0;
        int mod = (int)1e5;
        Queue<Pair> q = new LinkedList<>();
        
        int[] dist = new int[100000];
        Arrays.fill(dist, Integer.MAX_VALUE);
        
        dist[start] = 0;
        
        q.add(new Pair(0,start));
        while(!q.isEmpty()) {
            int steps = q.peek().first;
            int node = q.peek().second;
            q.remove();
            
            // if(node == end) return steps;
            
            for(int v : arr) {
                int newVal = (v*node)%mod;
                if(steps+1 < dist[newVal]) {
                    dist[newVal] = steps+1;
                    
                    if(newVal == end) return steps+1;
                    q.add(new Pair(steps+1, newVal));
                }
            }
        }
        return -1;
    }
}
