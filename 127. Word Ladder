Approach : BFS
Time complexity : O(N * (wordLength * 26))
Space complexity : O(N)

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> st = new HashSet<>(wordList);
        Queue<Pair<String,Integer>> q = new LinkedList<>();

        q.add(new Pair<>(beginWord, 1));
        st.remove(beginWord);
        
        while(!q.isEmpty()) {
            String word = q.peek().getKey();
            int level = q.peek().getValue();
            q.remove();
            
            if(word.equals(endWord)) return level;

            for(int i=0;i<word.length();i++) {
                for(char ch='a';ch<='z';ch++) {
                    char[] wordArr = word.toCharArray();
                    wordArr[i] = ch;
                    String replaceWord = new String(wordArr); 
                    if(st.contains(replaceWord)) {
                        st.remove(replaceWord);
                        q.add(new Pair<>(replaceWord, level+1));
                    }
                }
            }
        }
        
        return 0;
    }
}
