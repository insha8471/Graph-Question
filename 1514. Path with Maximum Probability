Approach : Dijkstra using maxheap
Time complelxity : O(VlogE)
Space complexity : O(V + E)

class Pair {
    double probability;
    int node;
    Pair(double probability, int node) {
        this.probability = probability;
        this.node = node;
    }
}
class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        
        for(int i=0;i<n;i++) {
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<edges.length;i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            double prob = succProb[i];

            adj.get(u).add(new Pair(prob, v));
            adj.get(v).add(new Pair(prob, u));
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b) -> Double.compare(b.probability, a.probability));

        double[] dist = new double[n];
        Arrays.fill(dist, 0.0);
        dist[start_node] = 1.0;

        pq.add(new Pair(1.0, start_node));
        while(!pq.isEmpty()) {
            double prob = pq.peek().probability;
            int node = pq.peek().node;            
            pq.remove();

            if(node == end_node) {
                return prob;
            }

            for(Pair it : adj.get(node)) {
                double succProb1 = it.probability;
                int adjNode = it.node;

                if(prob * succProb1 > dist[adjNode]) {
                    dist[adjNode] = (prob * succProb1);
                    pq.add(new Pair(dist[adjNode], adjNode));
                }
            }
        }
        return dist[end_node];
    }
}
