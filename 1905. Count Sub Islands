Apporach : DFS
Time complexity  :O(n*m)
Space complexity : O(n*m)

class Solution {
    int n,m;
    public boolean check(int i, int j, int[][] g1, int[][] g2) {
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        int[][] directions = {{0,1},{1,0},{0,-1},{-1,0}};
        q.add(new Pair<>(i,j));
        boolean flag = true;

        g2[i][j] = 2;
        if(g1[i][j] != 1) {
            flag = false;
        }

        while(!q.isEmpty()){
            Pair<Integer, Integer> pair = q.poll();

            for(int[] dir : directions) {
                int i_ = dir[0] + pair.getKey();
                int j_ = dir[1] + pair.getValue();

                if(i_ >= 0 && i_ < n && j_ >= 0 && j_ < m && g2[i_][j_] == 1) {
                    q.add(new Pair<>(i_,j_));
                    g2[i_][j_] = 2;
                    if(g1[i_][j_] != 1) {
                        flag = false;
                    }
                }
            }
        }
        return flag;
    }
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        n = grid1.length;
        m = grid1[0].length;
        int subIsland = 0;

        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(grid2[i][j] == 1) {
                    if(check(i,j,grid1, grid2)) {
                        subIsland++;
                    }
                }
            }
        }
        return subIsland;


    }
}
