Approch : Dijkstra Algorithm
Time complexity : O(3*N*M)
Space complexity : O(N*M)

class Tuple {
    int x;
    int y;
    int diff;
    Tuple(int x, int y, int diff) {
        this.x = x;
        this.y = y;
        this.diff  = diff;
    }
}
class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;

        PriorityQueue<Tuple> pq = new PriorityQueue<>((a,b) -> a.diff-b.diff);

        int[][] dist = new int[n][m];

        for(int[] a : dist) {
            Arrays.fill(a, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        pq.add(new Tuple(0,0,0));
        int[][] directions = {{0,1}, {1,0}, {0,-1}, {-1,0}};

        while(!pq.isEmpty()) {
            int x = pq.peek().x;
            int y = pq.peek().y;
            int diff = pq.peek().diff;
            pq.remove();

            if(x == n-1 & y == m-1) return diff;

            for(int[] dir : directions) {
                int r = x + dir[0];
                int c = y + dir[1];

                if(r >= 0 && r<n && c >= 0 && c < m) {
                    int newEffort = Math.max(diff, Math.abs(heights[x][y]-heights[r][c]));

                    if(newEffort < dist[r][c]) {
                        pq.add(new Tuple(r,c,newEffort));
                        dist[r][c] = newEffort;
                    }
                }
            }
        }
        return 0;
    }
}
