Approach  : Dikstra Algorithm

Time complexity : O(4*N*M)
Space complexity : O(N*M)

class Tuple{
        int x;
        int y;
        int dist;

        Tuple(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }           
    }
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;

        if(grid[0][0] == 1) return -1;

        int[][] dist = new int[n][n];
        for(int[] a : dist) {
            Arrays.fill(a, Integer.MAX_VALUE);
        }

        dist[0][0] = 1;
        Queue<Tuple> q = new LinkedList<>();

        q.add(new Tuple(0,0,1));
        int[][] directions ={{0,1},{1,0},{0,-1},{-1,0},{1,1},{-1,-1},{1,-1},{-1,1}};

        while(!q.isEmpty()) {
            int x = q.peek().x;
            int y = q.peek().y;
            int dis = q.peek().dist;
            q.remove();

            for(int[] dir : directions) {
                int r = x+dir[0];
                int c = y+dir[1];

                if(r >= 0 && r < n && c >= 0 && c < n && grid[r][c] == 0 && dis+1 < dist[r][c]) {
                    dist[r][c] = dis + 1;
                    q.add(new Tuple(r,c,dis+1));
                }
            }
        }
        if(dist[n-1][n-1] == Integer.MAX_VALUE)
            return -1;
        return dist[n-1][n-1];
    }
}
